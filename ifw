#!/bin/bash
#
# rc.firewall-0.21
# Linux/Netfilter firewall script.
#
# (c) 2004 by ingwar
# Distributed under the terms of GNU GPLv2 or later versions.
#
# Config files:
#
# /etc/firewall
# |
# |-if_ext	external interfaces
# |  -tcp_ok	open TCP ports
# |  -udp_ok	open UDP ports
# |  -tcp_fw	TCP ports, allowed to forward in
# |  -udp_fw	UDP ports, allowed to forward in
# |
# |-if_int	internal interfaces
# |
# |-if_masq	masqueraded interfaces
# |
# |-blacklist	blacklisted hosts
# |
# |-nofw_hard	noforwarded hosts
# |
# |-nofw_soft	partially noforwarded hosts
# |  -tcp_nofw	TCP ports list for nofw_soft
# |  -udp_nofw	UDP ports list for nofw_soft
# |
# |-ulog        flag file, if present - ULOG works
# |  -noulog    don't ULOG these hosts
#
# Release history:
#
# 0.21  Implemented comditional ULOGging.
#       Added config file noulog.
#
# 0.20: "Release history" added.
#       ULOGging made conditional. Added "ulog" flag file.
#       Optimized chains for loopback interface.
#       Prevented BLACKLIST and NOFW_HARD chains from creating,
#       if respective config files does not exist.
#
# 0.19: Embeded NOFW_SOFT into FORWARD chain.
#       Simplified NOFW_SOFT rules. Tested and verified ULOG accuracy.
#
# 0.18: Optimisations and cleanups. Some condition checking
#       to simplify configuring.
#
# 0.17: Removed redundant code and implemented mp() function
#       for config file parsing. Documented config files.
#       Shortened variables names.
#
# 0.16: Full logging, fixed some --log--prefix bugs.
#
# 0.15: Initial version. Clean and simple.
#

IPT="echo iptables"
DATE=`date '+%Y%m%d%H%M%S'`
DUMPFILE="/var/log/iptables.dump"

FW="/etc/firewall"
F_IF_EXT="$FW/if_ext"
F_IF_INT="$FW/if_int"
F_IF_MASQ="$FW/if_masq"
BLACKLIST="$FW/blacklist"
NOFW_HARD="$FW/nofw_hard"
NOFW_SOFT="$FW/nofw_soft"
F_TCP_OK="$FW/tcp_ok"
F_UDP_OK="$FW/udp_ok"
F_TCP_FW="$FW/tcp_fw"
F_UDP_FW="$FW/udp_fw"
F_TCP_NOFW="$FW/tcp_nofw"
F_UDP_NOFW="$FW/udp_nofw"
ULOG="$FW/ulog"
NOULOG="$FW/noulog"

ERRMSG1="Can not open config file"
ERRMSG2="Empty config file"

mp() {

  MP=
  if [ -r $F ]; then
    i=1
    for P in `cat $F`; do
      if [ -z $MP ]; then
        MP="$P"
      else
        MP="$MP,$P"
      fi
    done
  fi

}

firewall_start() {

  if [ -r $F_IF_EXT ]; then
    i=1
    for IF in `cat $F_IF_EXT`; do
      if [ -n $IF ]; then
        IF_EXT[$i]="$IF"
        i=$i+1
      fi
    done
  else
    echo "$ERRMSG1: $F_IF_EXT"
    exit 1
  fi
  if [ ${#IF_EXT[@]} -lt 1 ]; then
    echo "$ERRMSG2: $F_IF_EXT"
    exit 1
  fi
  
  if [ -r $F_IF_INT ]; then
    i=1
    for IF in `cat $F_IF_INT`; do
      if [ -n $IF ]; then
        IF_INT[$i]="$IF"
        i=$i+1
      fi
    done
  else
    echo "$ERRMSG1: $F_IF_INT"
    exit 1
  fi
  if [ ${#IF_INT[@]} -lt 1 ]; then
    echo "$ERRMSG2: $F_IF_INT"
    exit 1
  fi

  $IPT -P INPUT DROP
  $IPT -P OUTPUT DROP
  $IPT -P FORWARD DROP

  CH='DENY'
  $IPT -N $CH
  $IPT -A $CH -p tcp -j REJECT --reject-with tcp-reset
  $IPT -A $CH -p udp -j REJECT --reject-with icmp-port-unreachable
  $IPT -A $CH -j DROP

  CH='CHECK'
  $IPT -N $CH
  $IPT -A $CH -p tcp ! --syn -m state --state NEW -j LOG --log-prefix "$CH: "
  $IPT -A $CH -p tcp ! --syn -m state --state NEW -j DROP

  if [ -r $BLACKLIST ]; then
    CH='BLACKLIST'
    $IPT -N $CH
    if [ -r $BLACKLIST ]; then
      for CIDR in `cat $BLACKLIST`; do
        if [ ${#CIDR} != 0 ]; then
          $IPT -A $CH -s $CIDR -j LOG --log-prefix "$CH: "
          $IPT -A $CH -s $CIDR -j DENY
        fi
      done
    fi
  fi

  if [ -r $ULOG ]; then
    CH='ULOG_IN'
    $IPT -N $CH
    if [ -r $NOULOG ]; then
      for CIDR in `cat $NOULOG`; do
        if [ ${#CIDR} != 0 ]; then
          $IPT -A $CH -s $CIDR -j RETURN
        fi
      done
    fi
    $IPT -A $CH -j ULOG --ulog-nlgroup 10 --ulog-cprange 20 --ulog-qthreshold 20
    CH='ULOG_OUT'
    $IPT -N $CH
    if [ -r $NOULOG ]; then
      for CIDR in `cat $NOULOG`; do
        if [ ${#CIDR} != 0 ]; then
          $IPT -A $CH -d $CIDR -j RETURN
        fi
      done
    fi
    $IPT -A $CH -j ULOG --ulog-nlgroup 20 --ulog-cprange 20 --ulog-qthreshold 20
  fi

  CH='INPUT'
  $IPT -A $CH -i lo -j ACCEPT
  $IPT -A $CH -j CHECK
  if [ -r $BLACKLIST ]; then
    $IPT -A $CH -j BLACKLIST
  fi
  for IF in ${IF_INT[@]}; do
    $IPT -N "$CH"_"$IF"
    $IPT -A "$CH"_"$IF" -j ACCEPT
    $IPT -A $CH -i $IF -j "$CH"_"$IF"
  done
  for IF in ${IF_EXT[@]}; do
    $IPT -N "$CH"_"$IF"
    if [ -r $ULOG ]; then
      $IPT -A "$CH"_"$IF" -j ULOG_IN
    fi
    $IPT -A "$CH"_"$IF" -p tcp -m state --state ESTABLISHED,RELATED -j ACCEPT
    $IPT -A "$CH"_"$IF" -p udp -m state --state ESTABLISHED,RELATED -j ACCEPT
    F=$F_TCP_OK mp
    if [ ${#MP} != 0 ]; then
      $IPT -A "$CH"_"$IF" -p tcp -m multiport --dport $MP -j ACCEPT
    fi
    F=$F_UDP_OK mp
    if [ ${#MP} != 0 ]; then
      $IPT -A "$CH"_"$IF" -p udp -m multiport --dport $MP -j ACCEPT
    fi
    $IPT -A "$CH"_"$IF" -p icmp -j ACCEPT
    $IPT -A "$CH"_"$IF" -j LOG --log-prefix "$CH"_"$IF: "
    $IPT -A "$CH"_"$IF" -j DENY
    $IPT -A $CH -i $IF -j "$CH"_"$IF"
  done
  $IPT -A $CH -j LOG --log-prefix "$CH: "
  $IPT -A $CH -j DENY

  CH='OUTPUT'
  $IPT -A $CH -o lo -j ACCEPT
  if [ -r $BLACKLIST ]; then
    $IPT -A $CH -j BLACKLIST
  fi
  for IF in ${IF_INT[@]}; do
    $IPT -N "$CH"_"$IF"
    $IPT -A "$CH"_"$IF" -j ACCEPT
    $IPT -A $CH -o $IF -j "$CH"_"$IF"
  done
  for IF in ${IF_EXT[@]}; do
    $IPT -N "$CH"_"$IF"
    if [ -r $ULOG ]; then
      $IPT -A "$CH"_"$IF" -j ULOG_OUT
    fi
    $IPT -A "$CH"_"$IF" -j ACCEPT
    $IPT -A $CH -o $IF -j "$CH"_"$IF"
  done
  $IPT -A $CH -j LOG --log-prefix "$CH: "
  $IPT -A $CH -j DENY

  if [ -r $NOFW_HARD ]; then
    CH='NOFW_HARD'
    $IPT -N $CH
    for CIDR in `cat $NOFW_HARD`; do
      if [ ${#CIDR} != 0 ]; then
        $IPT -A $CH -s $CIDR -j LOG --log-prefix "$CH: "
        $IPT -A $CH -s $CIDR -j DENY
        $IPT -A $CH -d $CIDR -j LOG --log-prefix "$CH: "
        $IPT -A $CH -d $CIDR -j DENY
      fi
    done
  fi

  CH='FORWARD'
  $IPT -A $CH -j CHECK
  if [ -r $BLACKLIST ]; then
    $IPT -A $CH -j BLACKLIST
  fi
  for IF in ${IF_INT[@]}; do
    $IPT -N "$CH"_"$IF"
    if [ -r $NOFW_HARD ]; then
      $IPT -A "$CH"_"$IF" -j NOFW_HARD
    fi
    if [ -r $NOFW_SOFT ]; then
      for CIDR in `cat $NOFW_SOFT`; do
        F=$F_TCP_NOFW mp
        if [ ${#MP} != 0 ]; then
          $IPT -A "$CH"_"$IF" -s $CIDR -p tcp -m multiport --dport $MP -j LOG --log-prefix "NOFW_SOFT: "
          $IPT -A "$CH"_"$IF" -s $CIDR -p tcp -m multiport --dport $MP -j DENY
        fi
        F=$F_UDP_NOFW mp
        if [ ${#MP} != 0 ]; then
          $IPT -A "$CH"_"$IF" -s $CIDR -p udp -m multiport --dport $MP -j LOG --log-prefix "NOFW_SOFT: "
          $IPT -A "$CH"_"$IF" -s $CIDR -p udp -m multiport --dport $MP -j DENY
        fi
      done
    fi
    for IF_O in ${IF_EXT[@]}; do
      if [ -r $ULOG ]; then
        $IPT -A "$CH"_"$IF" -o $IF_O -j ULOG_OUT
      fi
    done
    $IPT -A "$CH"_"$IF" -j ACCEPT
    $IPT -A $CH -i $IF -j "$CH"_"$IF"
  done
  for IF in ${IF_EXT[@]}; do
    $IPT -N "$CH"_"$IF"
    if [ -r $ULOG ]; then
      $IPT -A "$CH"_"$IF" -j ULOG_IN
    fi
    if [ -r $NOFW_HARD ]; then
      $IPT -A "$CH"_"$IF" -j NOFW_HARD
    fi
    if [ -r $NOFW_SOFT ]; then
      for CIDR in `cat $NOFW_SOFT`; do
        F=$F_TCP_NOFW mp
        if [ ${#MP} != 0 ]; then
          $IPT -A "$CH"_"$IF" -d $CIDR -p tcp -m multiport --sport $MP -j LOG --log-prefix "NOFW_SOFT: "
          $IPT -A "$CH"_"$IF" -d $CIDR -p tcp -m multiport --sport $MP -j DENY
        fi
        F=$F_UDP_NOFW mp
        if [ ${#MP} != 0 ]; then
          $IPT -A "$CH"_"$IF" -d $CIDR -p udp -m multiport --sport $MP -j LOG --log-prefix "NOFW_SOFT: "
          $IPT -A "$CH"_"$IF" -d $CIDR -p udp -m multiport --sport $MP -j DENY
        fi
      done
    fi
    $IPT -A "$CH"_"$IF" -p tcp -m state --state ESTABLISHED,RELATED -j ACCEPT
    $IPT -A "$CH"_"$IF" -p udp -m state --state ESTABLISHED,RELATED -j ACCEPT
    F=$F_TCP_FW mp
    if [ ${#MP} != 0 ]; then
      $IPT -A "$CH"_"$IF" -p tcp -m multiport --dport $MP -j ACCEPT
    fi
    F=$F_UDP_FW mp
    if [ ${#MP} != 0 ]; then
      $IPT -A "$CH"_"$IF" -p udp -m multiport --dport $MP -j ACCEPT
    fi
    $IPT -A "$CH"_"$IF" -p icmp -j ACCEPT
    $IPT -A "$CH"_"$IF" -j LOG --log-prefix "$CH"_"$IF: "
    $IPT -A "$CH"_"$IF" -j DENY
    $IPT -A $CH -i $IF -j "$CH"_"$IF"
  done
  $IPT -A $CH -j LOG --log-prefix "$CH: "
  $IPT -A $CH -j DENY

  CH='POSTROUTING'
  if [ -r $F_IF_MASQ ]; then
    for IF in `cat $F_IF_MASQ`; do
      if [ -n $IF ]; then
	$IPT -t nat -A $CH -o $IF -j MASQUERADE
      fi
    done
  fi

}

firewall_stop() {
	$IPT -t filter -F
	$IPT -t filter -X
	$IPT -t filter -Z
	$IPT -t nat -F
	$IPT -t nat -X
	$IPT -t nat -Z
	$IPT -t mangle -F
	$IPT -t mangle -X
	$IPT -t mangle -Z
	$IPT -P INPUT ACCEPT
	$IPT -P OUTPUT ACCEPT
	$IPT -P FORWARD ACCEPT
}

firewall_status() {
	echo "START $DATE"
	$IPT -t filter -vnx -L --line-numbers
	echo "END $DATE"
}

firewall_dump() {
	echo "START $DATE" >> $DUMPFILE
	$IPT -t filter -vnxZ -L --line-numbers >> $DUMPFILE
	echo "END $DATE" >> $DUMPFILE
}

case "$1" in
  start)
	firewall_start
	;;
  stop)
	firewall_stop
	;;
  restart)
	firewall_stop
	firewall_start
	;;
  status)
	firewall_status
  	;;
  dump)
	firewall_dump
  	;;
  *)
	echo "usage: $0 {start|stop|restart|status|dump}" >&2
	exit 1
	;;
esac

exit 0
