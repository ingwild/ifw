#!/bin/bash
#
# ing's firewall
# Linux/Netfilter firewall script
#
# (c) 2003-2014 by ing at wild dot in dot ua
#
# Distributed under the terms of GNU GPLv3
#

FW="/etc/firewall"
INTERFACES="$FW/if"
PORTS="$FW/ports"

THOSTS="$FW/thosts"
BLACKMAC="$FW/blackmac"
BLACKLIST="$FW/blacklist"
HARDLIST="$FW/hardlist"
SOFTLIST="$FW/softlist"
WHITELIST="$FW/whitelist"
DNAT="$FW/dnat"
ETHER="$FW/ethers"
LOG="$FW/log"
ULOG="$FW/ulog"
NOULOG="$FW/noulog"
PPORTS="$FW/pports"

NOWHITE="$FW/nowhite"
PASS="$FW/pass"
NOPASS="$FW/nopass"
MPORTS="$FW/mports"

DATE=`date '+%Y%m%d%H%M%S'`
DUMPFILE="/var/log/iptables.dump"

# Port listings
declare -a T=( open pass nopass nowhite mark peer tarpit )
declare -A TSTATUS

errcho() {
  echo "$@" 1>&2
  exit 1
}

if [ "$2" == "debug" ]; then
  DEBUG=1
  IPT="echo iptables"
  IPS='echo ipset'
else
  DEBUG=0
  IPT="iptables"
  IPS="ipset"
fi

if [ -r $LOG ]; then
  log=1
else
  log=0
fi

# convert config file with ports list
# to string accepted by multiport module
mp() {

  MP_TCP=
  MP_UDP=
  if [ -r $F ]; then
    for str in `cat $F`; do
      PORT=`expr "$str" : '\(.*\)\/'`
      PROTO=`expr "$str" : '.*\/\(.*\)'`
      case "$PROTO" in
      'tcp')
        if [ -z "$MP_TCP" ]; then
          MP_TCP="$PORT"
        else
          MP_TCP="$MP_TCP,$PORT"
        fi
        ;;
      'udp')
        if [ -z "$MP_UDP" ]; then
          MP_UDP="$PORT"
        else
          MP_UDP="$MP_UDP,$PORT"
        fi
        ;;
      '')
        errcho "Empty protocol in $F."
        ;;
      *)
        errcho "Unknown protocol \"$PROTO\" in $F."
        ;;
      esac
    done
  fi

}

port_start() {

  if [ ! -r $PORTS ]; then
    errcho "Config file is not readable! ($PORTS)"
  fi

  for PTYPE in ${T[@]}; do
    TSTATUS[$PTYPE"_tcp"]=0
    TSTATUS[$PTYPE"_udp"]=0
  done

  i=1

  IFS='
'
  for str in `cat $PORTS`; do

    IFS='/ 	' read PORT PROTO TYPE <<<$str
    unset IFS

    if [ -z "$PORT" ]; then
      errcho "$PORTS: line $i: Emtpy port number!"
    elif [[ ! "$PORT" =~ ^[0-9]+$ ]] || [ "$PORT" == 0 ] || [ "$PORT" -gt 65535 ]; then
      errcho "$PORTS: line $i: Invalid port number! ($PORT)"
    fi

    if [ -z "$PROTO" ]; then
      errcho "$PORTS: line $i: Emtpy protocol!"
    elif [ "$PROTO" != 'tcp' ] && [ "$PROTO" != 'udp' ]; then
      errcho "$PORTS: line $i: Unknown protocol! ($PROTO)"
    fi

    if [ -z "$TYPE" ]; then
      errcho "$PORTS: line $i: Emtpy port type!"
    else
      MATCH=0
      for PTYPE in ${T[@]}; do
        if [ $TYPE == $PTYPE ]; then
          MATCH=1 
        fi
      done
      if [ ! $MATCH == 1 ]; then
        errcho "$PORTS: line $i: Unknown port type! ($TYPE)"
      fi
    fi

    SET=$TYPE"_$PROTO"

    if [ ${TSTATUS[$SET]} == 0 ]; then
      $IPS create $SET bitmap:port range 0-65535
      TSTATUS[$SET]=1
    fi

    if [ ${TSTATUS[$SET]} == 1 ]; then
      $IPS add $SET $PORT
    fi

    i=$(($i+1))

  done

  unset IFS

}

port_stop() {

  for PTYPE in ${T[@]}; do
    if [ "${TSTATUS[$PTYPE]}" == 1 ]; then
      SET="ports_"$PTYPE
      $IPS destroy $SET
    fi
  done

}

list_start() {

  for SET in WHITELIST BLACKLIST HARDLIST SOFTLIST THOSTS PEERS NOULOG ; do

    LIST="$FW/"${SET,,}
    DUMP="$LIST.dump"

    [[ ! -r $LIST ]] && continue

    if [[ -r $DUMP ]] && [[ $DUMP -nt $LIST ]] && [[ $DEBUG == 0 ]] ; then

      # It's much quicker to restore from dump
      # if it's readable and newer than list
      $IPS restore < $DUMP

    else

      # Create ipset: slow
      $IPS create $SET hash:net
      for CIDR in `cat $LIST`; do
        if [ -n $CIDR ]; then
          $IPS add $SET $CIDR
        fi
      done

      # Save dump for future runs if no debug
      [[ $DEBUG == 0 ]] && $IPS save $SET > $DUMP

    fi

  done

}


list_stop() {

  # remove all ipsets
  $IPS destroy

}

firewall_start() {

  # filter table

  # interfaces
  if [ -r $INTERFACES ]; then
    flag=0
    for str in `cat $INTERFACES`; do
      if [ $flag == 0 ]; then
        IF=$str
        flag=1
      else
        TYPE=$str
        if [ -n "$IF" ] && [ -n "$TYPE" ]; then
          case "$TYPE" in
          "ext")
            IF_EXT[${#IF_EXT[@]}+1]=$IF
            ;;
          "int")
            IF_INT[${#IF_INT[@]}+1]=$IF
            ;;
          "masq")
            IF_MASQ[${#IF_MASQ[@]}+1]=$IF
            ;;
          "blind")
            IF_BLIND[${#IF_BLIND[@]}+1]=$IF
            ;;
          *)
            errcho "Unknown type \"$TYPE\" for interface \"$IF\"."
            ;;
          esac
        fi
        flag=0
      fi
    done
  else
    errcho "Can not open config file: $INTERFACES"
  fi
  if [ ${#IF_EXT[@]} -lt 1 ] && [ ${#IF_INT[@]} -lt 1 ]; then
    errcho "No external or internal interfaces found. Check $INTERFACES"
  fi

  # default policy is to drop everything
  $IPT -P INPUT DROP
  $IPT -P OUTPUT DROP
  $IPT -P FORWARD DROP

  # what to do with denied packets
  CH1='DENY'
  $IPT -N $CH1
  $IPT -A $CH1 -p tcp -j REJECT --reject-with tcp-reset
  $IPT -A $CH1 -p udp -j REJECT --reject-with icmp-port-unreachable
  $IPT -A $CH1 -j DROP

  # sanity check, filter strange packets
  CH1='CHECK'
  $IPT -N $CH1
  [[ $log -ge 1 ]] && $IPT -A $CH1 -p tcp ! --syn -m state --state NEW -j LOG --log-prefix "$CH1 (strange): "
  $IPT -A $CH1 -p tcp ! --syn -m state --state NEW -j DROP
  [[ $log -ge 1 ]] && $IPT -A $CH1 -p tcp --tcp-flags ACK,FIN FIN -j LOG --log-prefix "$CH1 (FIN scan): "
  $IPT -A $CH1 -p tcp --tcp-flags ACK,FIN FIN -j DROP

  # known ICMP types accepted
  CH1='ICMP'
  $IPT -N $CH1
  $IPT -A $CH1 -p icmp --icmp-type echo-request -j ACCEPT
  $IPT -A $CH1 -p icmp --icmp-type echo-reply -j ACCEPT
  $IPT -A $CH1 -p icmp --icmp-type destination-unreachable -j ACCEPT
  $IPT -A $CH1 -p icmp --icmp-type time-exceeded -j ACCEPT
  [[ $log -ge 1 ]] && $IPT -A $CH1 -j LOG --log-prefix "$CH1: "
  $IPT -A $CH1 -j DROP

  # Catch connections from these hosts
  if [ -r $THOSTS ]; then
    CH1='THOSTS'
    $IPT -N $CH1
    SET='THOSTS'
    [[ $log -ge 1 ]] && $IPT -A $CH1 -m set --match-set $SET src -p tcp -j LOG --log-prefix "$CH1: "
    $IPT -A $CH1 -m set --match-set $SET src -p tcp -j TARPIT
  fi

  # MAC based blacklist: hosts, not allowed to connect or forward
  if [ -r $BLACKMAC ]; then
    CH1='BLACKMAC'
    $IPT -N $CH1
    for MAC in `cat $BLACKMAC`; do
      if [ -n $MAC ]; then
        [[ $log -ge 1 ]] && $IPT -A $CH1 -m mac --mac-source $MAC -j LOG --log-prefix "$CH1: "
        $IPT -A $CH1 -m mac --mac-source $MAC -j DENY
      fi
    done
  fi

  # IP based blacklist: hosts, not allowed to connect or forward
  if [ -r $BLACKLIST ]; then
    CH1='BLACKLIST'
    $IPT -N $CH1
    SET='BLACKLIST'
    [[ $log -ge 1 ]] && $IPT -A $CH1 -m set --match-set $SET src -j LOG --log-prefix "$CH1: "
    $IPT -A $CH1 -m set --match-set $SET src -j DENY
  fi

  # hardlist: hosts, not allowed to forward
  if [ -r $HARDLIST ]; then
    CH1='HARDLIST'
    $IPT -N $CH1
    SET='HARDLIST'
    [[ $log -ge 1 ]] && $IPT -A $CH1 -m set --match-set $SET src -j LOG --log-prefix "$CH1: "
    $IPT -A $CH1 -m set --match-set $SET src -j DENY
    [[ $log -ge 1 ]] && $IPT -A $CH1 -m set --match-set $SET dst -j LOG --log-prefix "$CH1: "
    $IPT -A $CH1 -m set --match-set $SET dst -j DENY
  fi

  # only accept packets from known MAC+IP pairs
  if [ -r $ETHER ]; then
    CH1='ETHER'
    $IPT -N $CH1
    # allow DHCP
    $IPT -A $CH1 -p udp --dport 67:68 --sport 67:68 -j ACCEPT
    flag=0
    for str in `cat $ETHER`; do
      if [ $flag == 0 ]; then
        MAC=$str
        flag=1
      else
        IP=$str
        if [ -n $MAC ] && [ -n $IP ]; then
          $IPT -A $CH1 -m mac --mac-source $MAC -s $IP -j RETURN
        fi
        flag=0
      fi
    done
    [[ $log -ge 1 ]] && $IPT -A $CH1 -j LOG --log-prefix "$CH1: "
    $IPT -A $CH1 -j DENY
  fi

  # packet counter
  if [ -r $ULOG ]; then

    SET='NOULOG'

    # incoming packets counter
    CH1='ULOG_IN'
    $IPT -N $CH1

    # do not count packets from hosts-exceptions
    [[ -r $NOULOG ]] && $IPT -A $CH1 -m set --match-set $SET src -j RETURN

    # count these packets as incoming
    $IPT -A $CH1 -j ULOG --ulog-nlgroup 10 --ulog-cprange 20 --ulog-qthreshold 20

    # outgoing packets counter
    CH1='ULOG_OUT'
    $IPT -N $CH1

    # do not count packets to hosts-exceptions
    [[ -r $NOULOG ]] && $IPT -A $CH1 -m set --match-set $SET dst -j RETURN

    # count these packets as outgoing
    $IPT -A $CH1 -j ULOG --ulog-nlgroup 20 --ulog-cprange 20 --ulog-qthreshold 20

  fi

  if [ -r $PEERS ]; then

    SET='PEERS'
    F=$PPORTS mp

    # deny inbound ports from some peers

    CH1='PEERS_IN'
    $IPT -N $CH1

    [[ -n "$MP_TCP" ]] && [[ $log -ge 1 ]] && $IPT -A $CH1 -m set --match-set $SET src -p tcp -m multiport --dport $MP_TCP -j LOG --log-prefix "$CH1: "
    [[ -n "$MP_TCP" ]] && $IPT -A $CH1 -m set --match-set $SET src -p tcp -m multiport --dport $MP_TCP -j DENY
    [[ -n "$MP_TCP" ]] && $IPT -A $CH1 -p tcp -m multiport --dport $MP_TCP -j ACCEPT
    [[ -n "$MP_UDP" ]] && [[ $log -ge 1 ]] && $IPT -A $CH1 -m set --match-set $SET src -p udp -m multiport --dport $MP_TCP -j LOG --log-prefix "$CH1: "
    [[ -n "$MP_UDP" ]] && $IPT -A $CH1 -m set --match-set $SET src -p udp -m multiport --dport $MP_TCP -j DENY
    [[ -n "$MP_UDP" ]] && $IPT -A $CH1 -p udp -m multiport --dport $MP_UDP -j ACCEPT

    # deny outbound ports to some peers

    CH1='PEERS_OUT'
    $IPT -N $CH1

    [[ -n "$MP_TCP" ]] && [[ $log -ge 1 ]] && $IPT -A $CH1 -m set --match-set $SET dst -p tcp -m multiport --sport $MP_TCP -j LOG --log-prefix "$CH1: "
    [[ -n "$MP_TCP" ]] && $IPT -A $CH1 -m set --match-set $SET dst -p tcp -m multiport --sport $MP_TCP -j DENY
    [[ -n "$MP_TCP" ]] && $IPT -A $CH1 -p tcp -m multiport --sport $MP_TCP -j ACCEPT
    [[ -n "$MP_UDP" ]] && [[ $log -ge 1 ]] && $IPT -A $CH1 -m set --match-set $SET dst -p udp -m multiport --sport $MP_TCP -j LOG --log-prefix "$CH1: "
    [[ -n "$MP_UDP" ]] && $IPT -A $CH1 -m set --match-set $SET dst -p udp -m multiport --sport $MP_TCP -j DENY
    [[ -n "$MP_UDP" ]] && $IPT -A $CH1 -p udp -m multiport --sport $MP_UDP -j ACCEPT

  fi

  # input chain, always exists
  CH1='INPUT'

  # accept all loopback packets
  $IPT -A $CH1 -i lo -j ACCEPT

  # sanity check first
  $IPT -A $CH1 -j CHECK

  # allow packets from whitelisted hosts except chosen ports, if any
  if [ -r $WHITELIST ]; then
    SET='WHITELIST'
    if [ ${TSTATUS[nowhite_tcp]} == 1 ]; then
      $IPT -A $CH1 -m set --match-set $SET src -p tcp -m set --match-set nowhite_tcp dst -j DENY
    elif [ ${TSTATUS[nowhite_udp]} == 1 ]; then
      $IPT -A $CH1 -m set --match-set $SET src -p udp -m set --match-set nowhite_udp dst -j DENY
    fi
    $IPT -A $CH1 -m set --match-set $SET src -j ACCEPT
  fi

  # catch connections to theses ports
  [ ${TSTATUS[tarpit_tcp]} == 1 ] && [[ $log -ge 1 ]] && $IPT -A $CH1 -p tcp -m set --match-set tarpit_tcp dst -j LOG --log-prefix "TARPIT: "
  [ ${TSTATUS[tarpit_tcp]} == 1 ] && $IPT -A $CH1 -p tcp -m set --match-set tarpit_tcp dst -j TARPIT
  [ ${TSTATUS[tarpit_udp]} == 1 ] && [[ $log -ge 1 ]] && $IPT -A $CH1 -p udp -m set --match-set tarpit_udp dst -j LOG --log-prefix "TARPIT: "
  [ ${TSTATUS[tarpit_udp]} == 1 ] && $IPT -A $CH1 -p udp -m set --match-set tarpit_udp dst -j TARPIT

  # catch connections from theses hosts
  [[ -r $THOSTS ]] && $IPT -A $CH1 -j THOSTS

  # deny pockects from blacklisted hosts
  [[ -r $BLACKMAC ]] && $IPT -A $CH1 -j BLACKMAC
  [[ -r $BLACKLIST ]] && $IPT -A $CH1 -j BLACKLIST

  # separate chain for each internal interface
  for IF in ${IF_INT[@]}; do
    CH2=$CH1\_$IF
    $IPT -N $CH2

    # deny trffic from unknown MAC+IP pairs
    [[ -r $ETHER ]] && $IPT -A $CH2 -j ETHER

    # accept all the other
    $IPT -A $CH2 -j ACCEPT

    # hook to upper chain
    $IPT -A $CH1 -i $IF -j $CH2

  done

  # separate chain for each external interface
  for IF in ${IF_EXT[@]}; do
    CH2=$CH1\_$IF
    $IPT -N $CH2

    # count all incoming packets
    [[ -r $ULOG ]] && $IPT -A $CH2 -j ULOG_IN

    # accept established connections
    $IPT -A $CH2 -p tcp -m state --state ESTABLISHED,RELATED -j ACCEPT
    $IPT -A $CH2 -p udp -m state --state ESTABLISHED,RELATED -j ACCEPT

    # accept packets to open ports on this host

    [ ${TSTATUS[open_tcp]} == 1 ] && $IPT -A $CH2 -p tcp -m set --match-set open_tcp dst -j ACCEPT
    [ ${TSTATUS[open_udp]} == 1 ] && $IPT -A $CH2 -p udp -m set --match-set open_udp dst -j ACCEPT

    # accept ICMP
    $IPT -A $CH2 -p icmp -j ICMP

    # filter inbound ports from some peers
    [[ -r $PEERS ]] && $IPT -A $CH2 -j PEERS_IN

    # deny all the rest on this interface
    [[ $log -ge 1 ]] && $IPT -A $CH2 -j LOG --log-prefix "$CH2: "
    $IPT -A $CH2 -j DENY

    # hook to upper chain
    $IPT -A $CH1 -i $IF -j $CH2

  done

  # deny all the rest
  [[ $log -ge 1 ]] && $IPT -A $CH1 -j LOG --log-prefix "$CH1: "
  $IPT -A $CH1 -j DENY

  # output chain, always exists
  CH1='OUTPUT'

  # accept all loopback packets
  $IPT -A $CH1 -o lo -j ACCEPT

  # allow packets to whitelisted hosts except chosen ports, if any
  if [ -r $WHITELIST ]; then
    SET='WHITELIST'
    if [ ${TSTATUS[nowhite_tcp]} == 1 ]; then
      $IPT -A $CH1 -m set --match-set $SET dst -p tcp -m set --match-set nowhite_tcp src -j DENY
    elif [ ${TSTATUS[nowhite_udp]} == 1 ]; then
      $IPT -A $CH1 -m set --match-set $SET dst -p udp -m set --match-set nowhite_udp src -j DENY
    fi
    $IPT -A $CH1 -m set --match-set $SET dst -j ACCEPT
  fi

  # deny packets to blacklisted hosts
  [[ -r $BLACKLIST ]] && $IPT -A $CH1 -j BLACKLIST

  # separate chain for each internal interface
  for IF in ${IF_INT[@]}; do
    CH2=$CH1\_$IF
    $IPT -N $CH2

    # accept all packets to internal hosts
    $IPT -A $CH2 -j ACCEPT

    # hook to upper chain
    $IPT -A $CH1 -o $IF -j $CH2

  done

  # separate chain for each external interface
  for IF in ${IF_EXT[@]}; do
    CH2=$CH1\_$IF
    $IPT -N $CH2

    # count all packets to external interfaces
    [[ -r $ULOG ]] && $IPT -A $CH2 -j ULOG_OUT

    # filter outbound ports to some peers
    [[ -r $PEERS ]] && $IPT -A $CH2 -j PEERS_OUT

    # accept all packets to external interfaces
    $IPT -A $CH2 -j ACCEPT

    # hook to upper chain
    $IPT -A $CH1 -o $IF -j $CH2

  done

  # deny all the other
  [[ $log -ge 1 ]] && $IPT -A $CH1 -j LOG --log-prefix "$CH1: "
  $IPT -A $CH1 -j DENY

  # forward chain, always exists
  CH1='FORWARD'

  # sanity check first
  $IPT -A $CH1 -j CHECK

  # deny packets from blacklisted hosts
  [[ -r $BLACKMAC ]] && $IPT -A $CH1 -j BLACKMAC
  [[ -r $BLACKLIST ]] && $IPT -A $CH1 -j BLACKLIST

  # separate chain for each internal interface
  for IF in ${IF_INT[@]}; do
    CH2=$CH1\_$IF
    $IPT -N $CH2

    # pass packets only with valid source IP
    if [ -r $INTERFACES.$IF ]; then
      CH3=$CH2\_SIP
      $IPT -N $CH3
      for CIDR in `cat $INTERFACES.$IF`; do
        [[ -n $CIDR ]] && $IPT -A $CH3 -s $CIDR -j RETURN
      done
      [[ $log -ge 1 ]] && $IPT -A $CH3 -j LOG --log-prefix "$CH3: "
      $IPT -A $CH3 -j DENY
      $IPT -A $CH2 -j $CH3
    fi

    # don't forward packets from/to internal interfaces to/from blinded interfaces
    for IF_O in ${IF_INT[@]}; do
      for IF_B in ${IF_BLIND[@]}; do
        if ([ -n $IF_B ] && [ $IF != $IF_O ]) && ([ $IF == $IF_B ] || [ $IF_O == $IF_B ]); then
          [[ $log -ge 1 ]] && $IPT -A $CH2 -o $IF_O -j LOG --log-prefix "BLIND: "
          $IPT -A $CH2 -o $IF_O -j DENY
        fi
      done
    done

    # don't forward packets from hardlisted hosts
    [[ -r $HARDLIST ]] && $IPT -A $CH2 -j HARDLIST

    # don't forward packets from softlisted hosts on specified ports
    if [ -r $SOFTLIST ] && [ -r $NOPASS ] ; then
      SET='SOFTLIST'
      F=$NOPASS mp
      [[ -n "$MP_TCP" ]] && [[ $log -ge 1 ]] && $IPT -A $CH2 -m set --match-set $SET src -p tcp -m multiport --dport $MP_TCP -j LOG --log-prefix "SOFTLIST: "
      [[ -n "$MP_TCP" ]] && $IPT -A $CH2 -m set --match-set $SET src -p tcp -m multiport --dport $MP_TCP -j DENY
      [[ -n "$MP_UDP" ]] && [[ $log -ge 1 ]] && $IPT -A $CH2 -m set --match-set $SET src -p udp -m multiport --dport $MP_UDP -j LOG --log-prefix "SOFTLIST: "
      [[ -n "$MP_UDP" ]] && $IPT -A $CH2 -m set --match-set $SET src -p udp -m multiport --dport $MP_UDP -j DENY
    fi

    # deny packets from unknown MAC+IP pairs
    [[ -r $ETHER ]] && $IPT -A $CH2 -j ETHER

    # count only packets, coming out from external interfaces
    for IF_O in ${IF_EXT[@]}; do
      [[ -r $ULOG ]] && $IPT -A $CH2 -o $IF_O -j ULOG_OUT
    done

    # accept all the other on this interface
    $IPT -A $CH2 -j ACCEPT
    $IPT -A $CH1 -i $IF -j $CH2

  done

  # separate chain for each interface
  for IF in ${IF_EXT[@]}; do
    CH2=$CH1\_$IF
    $IPT -N $CH2

    # count all packets
    [[ -r $ULOG ]] && $IPT -A $CH2 -j ULOG_IN

    # don't forward packets to hardlisted hosts
    [[ -r $HARDLIST ]] && $IPT -A $CH2 -j HARDLIST

    # don't forward packets to softlisted hosts on specified ports
    if [[ -r $SOFTLIST ]] && [[ -r $NOPASS ]] ; then
      SET='SOFTLIST'
      F=$NOPASS mp
      [[ -n "$MP_TCP" ]] && [[ $log -ge 1 ]] && $IPT -A $CH2 -m set --match-set $SET dst -p tcp -m multiport --sport $MP_TCP -j LOG --log-prefix "SOFTLIST: "
      [[ -n "$MP_TCP" ]] && $IPT -A $CH2 -m set --match-set $SET dst -p tcp -m multiport --sport $MP_TCP -j DENY
      [[ -n "$MP_UDP" ]] && [[ $log -ge 1 ]] && $IPT -A $CH2 -m set --match-set $SET dst -p udp -m multiport --sport $MP_UDP -j LOG --log-prefix "SOFTLIST: "
      [[ -n "$MP_UDP" ]] && $IPT -A $CH2 -m set --match-set $SET dst -p udp -m multiport --sport $MP_UDP -j DENY
    fi

    # accept established connections
    $IPT -A $CH2 -p tcp -m state --state ESTABLISHED,RELATED -j ACCEPT
    $IPT -A $CH2 -p udp -m state --state ESTABLISHED,RELATED -j ACCEPT

    # accept packets to internal hosts on chosen ports
    F=$PASS mp
    [[ -n "$MP_TCP" ]] && $IPT -A $CH2 -p tcp -m multiport --dport $MP_TCP -j LOG --log-prefix "$CH2: "
    [[ -n "$MP_TCP" ]] && $IPT -A $CH2 -p tcp -m multiport --dport $MP_TCP -j ACCEPT
    [[ -n "$MP_UDP" ]] && $IPT -A $CH2 -p udp -m multiport --dport $MP_UDP -j LOG --log-prefix "$CH2: "
    [[ -n "$MP_UDP" ]] && $IPT -A $CH2 -p udp -m multiport --dport $MP_UDP -j ACCEPT

    # accept ICMP
    $IPT -A $CH2 -p icmp -j ICMP

    # deny all the other on this interface
    [[ $log -ge 1 ]] && $IPT -A $CH2 -j LOG --log-prefix "$CH2: "
    $IPT -A $CH2 -j DENY

    # hook to upper chain
    $IPT -A $CH1 -i $IF -j $CH2

  done

  # deny all the other
  [[ $log -ge 1 ]] && $IPT -A $CH1 -j LOG --log-prefix "$CH1: "
  $IPT -A $CH1 -j DENY

  # DNAT to internal hosts
  if [ -r $DNAT ]; then

    # prerouting chain, always exists
    CH1='PREROUTING'

    # only for external interfaces
    for IF in ${IF_EXT[@]}; do
      flag=0
      for str in `cat $DNAT`; do

        # parse two-column table in config file
        if [ $flag == 0 ]; then
          PORT=`expr "$str" : '\(.*\)\/'`
          PROTO=`expr "$str" : '.*\/\(.*\)'`
          flag=1
        else
          DST=$str
          if [ -n $PORT ] && [ -n $PROTO ] && [ -n $DST ]; then
            $IPT -t nat -A $CH1 -i $IF -p $PROTO --dport $PORT -j DNAT --to $DST
          fi
          flag=0
        fi

      done
    done

  fi

  # nat table

  # postrouting chain, always exists
  CH1='POSTROUTING'

  # masquerade on chosen interfaces
  for IF in ${IF_MASQ[@]}; do
    [[ -n $IF ]] && $IPT -t nat -A $CH1 -o $IF -j MASQUERADE
  done

  # mangle table

  # mangling for outgoing packets
  CH1='OUTPUT'
  
  if [ -r $MPORTS ]; then
    flag=0
    for str in `cat $MPORTS`; do

      # parse two-column table in config file
      if [ $flag == 0 ]; then
        PORT=`expr "$str" : '\(.*\)\/'`
        PROTO=`expr "$str" : '.*\/\(.*\)'`
        flag=1
      else
        MARK=$str
        if [ -n $PORT ] && [ -n $PROTO ] && [ -n $MARK ]; then
          $IPT -t mangle -A $CH1 -p $PROTO --sport $PORT -j MARK --set-mark $MARK
          $IPT -t mangle -A $CH1 -p $PROTO --dport $PORT -j MARK --set-mark $MARK
        fi
        flag=0
      fi

    done
  fi

  # mangling for forwarded packets
  CH1='PREROUTING'
  
  if [ -r $MPORTS ]; then
    flag=0
    for str in `cat $MPORTS`; do

      # parse two-column table in config file
      if [ $flag == 0 ]; then
        PORT=`expr "$str" : '\(.*\)\/'`
        PROTO=`expr "$str" : '.*\/\(.*\)'`
        flag=1
      else
        MARK=$str
        if [ -n $PORT ] && [ -n $PROTO ] && [ -n $MARK ]; then
          $IPT -t mangle -A $CH1 -p $PROTO --sport $PORT -j MARK --set-mark $MARK
          $IPT -t mangle -A $CH1 -p $PROTO --dport $PORT -j MARK --set-mark $MARK
        fi
        flag=0
      fi

    done
  fi

}

firewall_stop() {

  # flush, delete and zero all chains
  for t in filter nat mangle; do
    for op in F X Z; do
      $IPT -t $t -$op
    done
  done

  # default policy is to accept everything
  $IPT -P INPUT ACCEPT
  $IPT -P OUTPUT ACCEPT
  $IPT -P FORWARD ACCEPT

}

firewall_status() {

  # dump all counters
  echo "START $DATE"
  $IPT -t filter -vnx -L --line-numbers
  echo "END $DATE"

}

case "$1" in

  start)
    list_start
    port_start
    firewall_start
    ;;

  stop)
    firewall_stop
    port_stop
    list_stop
    ;;

  restart)
    firewall_stop
    port_stop
    list_stop
    list_start
    port_start
    firewall_start
    ;;

  status)
    firewall_status
    ;;

  dump)
    firewall_status >>$DUMPFILE
    ;;

  *)
    errcho "usage: $0 {start|stop|restart|status|dump} [debug]"
    ;;

esac

exit 0
